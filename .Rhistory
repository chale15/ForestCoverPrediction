step_rm(store, item, date_doy)
bart_model <- parsnip::bart(trees = 100) %>%
set_engine("dbarts") %>%
set_mode("classification") %>%
translate()
bart_workflow <- workflow() %>%
add_model(bart_model) %>%
add_recipe(my_recipe) %>%
fit(data=training(cv_split))
cv_results <- modeltime_calibrate(bart_workflow, new_data = testing(cv_split))
full_fit <- cv_results %>%
modeltime_refit(data = storeItemTrain)
preds <- full_fit %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
if(s==1 & i==1){
all_preds <- preds}
else {all_preds <- bind_rows(all_preds, preds)}
}
}
bart_model <- parsnip::bart(trees = 100) %>%
set_engine("dbarts") %>%
set_mode("regression") %>%
translate()
for(s in 1:nStores){
for(i in 1:nItems){
storeItemTrain <- train %>% filter(store==s, item==i)
storeItemTest <- test %>% filter(store==s, item==i)
cv_split <- time_series_split(storeItemTrain, assess="3 months", cumulative=TRUE)
my_recipe <- recipe(sales~., data = train) %>%
step_date(date, features=c('doy', 'decimal')) %>%
step_date(date, features = c('dow', 'month'), label = FALSE) %>%
step_range(date_doy, min=0, max=pi) %>%
step_mutate(sinDOY=sin(date_doy), cosDOY=cos(date_doy)) %>%
step_lag(date, lag=7) %>%
step_mutate_at(c(date_dow, date_month), fn = factor) %>%
step_rm(store, item, date_doy)
bart_model <- parsnip::bart(trees = 100) %>%
set_engine("dbarts") %>%
set_mode("regression") %>%
translate()
bart_workflow <- workflow() %>%
add_model(bart_model) %>%
add_recipe(my_recipe) %>%
fit(data=training(cv_split))
cv_results <- modeltime_calibrate(bart_workflow, new_data = testing(cv_split))
full_fit <- cv_results %>%
modeltime_refit(data = storeItemTrain)
preds <- full_fit %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
if(s==1 & i==1){
all_preds <- preds}
else {all_preds <- bind_rows(all_preds, preds)}
}
}
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(glmnet)
library(naivebayes)
library(discrim)
library(themis)
library(ranger)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom("./From Kaggle/train.csv")
test <- vroom("./From Kaggle/test.csv")
train$Cover_Type <- as.factor(train$Cover_Type)
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
View(baked)
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(1, 16)), min_n(), levels = c(4, 5))
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc))
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_knn(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
View(baked)
baked$SoilType
is.na(baked$SoilType)
sum(is.na(baked$SoilType))
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(1, 16)), min_n(), levels = c(4, 5))
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- rf_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
rf_preds <- predict(final_workflow,
new_data = test,
type = 'prob')
rf_preds <- predict(final_workflow,
new_data = test,
type = 'class')
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(1, 16)), min_n(), levels = c(4, 5))
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
train$Cover_Type <- as.factor(train$Cover_Type)
library(tidyverse)
library(tidymodels)
library(embed)
library(vroom)
library(workflows)
library(glmnet)
library(naivebayes)
library(discrim)
library(themis)
library(ranger)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom("./From Kaggle/train.csv")
test <- vroom("./From Kaggle/test.csv")
train$Cover_Type <- as.factor(train$Cover_Type)
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(2, 15)), min_n(), levels = 5)
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
library(yardstick)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_factor(SoilType, WildernessArea) %>%
step_zv(all_predictors())
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(2, 15)), min_n(), levels = 5)
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
library(tidyverse)
library(tidymodels)
library(vroom)
library(discrim)
library(themis)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom("./From Kaggle/train.csv")
test <- vroom("./From Kaggle/test.csv")
train$Cover_Type <- as.factor(train$Cover_Type)
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe)
baked <- bake(prepped, new_data = NULL)
rf_model <- rand_forest(mtry=tune(),
min_n=tune(),
trees=250) %>%
set_mode("classification") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(mtry(range=c(2, 15)), min_n(), levels = 5)
folds <- vfold_cv(train, v = 5, repeats=1)
cv_results <- rf_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy))
View(baked)
library(tidyverse)
library(tidymodels)
library(vroom)
library(parsnip)
library(keras)
library(baguette)
library(bonsai)
library(stacks)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom(file = "train.csv") %>%
mutate(Cover_Type=factor(Cover_Type))
train <- vroom(file = "./train.csv") %>%
mutate(Cover_Type=factor(Cover_Type))
train <- vroom("./From Kaggle/train.csv") %>%
mutate(Cover_Type=factor(Cover_Type))
test <- vroom("./From Kaggle/test.csv")
untuned_model <- control_stack_grid()
tuned_model <- control_stack_resamples()
folds <- vfold_cv(train, v = 5, repeats = 1)
my_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
rf_mod <- rand_forest(min_n = 1, mtry = 15, trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe1)
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe)
rf_model <- fit_resamples(rf_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = 10,
epochs = 50) %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
nn_model <- fit_resamples(nn_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
boost_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
boost_mod <- boost_tree(trees = 500, learn_rate = .01, tree_depth = 2) %>%
set_engine('xgboost') %>%
set_mode('classification')
boost_wf <- workflow() %>%
add_model(boost_mod) %>%
add_recipe(boost_recipe)
boost_model <- fit_resamples(boost_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
my_stack <- stacks() %>%
add_candidates(rf_model) %>%
add_candidates(nn_model) %>%
add_candidates(boost_model)
stack_mod <- my_stack %>%
blend_predictions() %>%
fit_members()
stack_preds <- stack_mod %>%
predict(new_data = test, type = "class")
format_and_write <- function(predictions, file){
final_preds <- predictions %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(final_preds,file,delim = ",")
}
format_and_write(stack_preds, "stack_preds.csv")
my_recipe1 <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
rf_mod <- rand_forest(min_n = 1, mtry = 15, trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe)
rf_model <- fit_resamples(rf_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
my_stack <- stacks() %>%
add_candidates(rf_model) %>%
add_candidates(nn_model) %>%
add_candidates(boost_model)
stack_mod <- my_stack %>%
blend_predictions() %>%
fit_members()
stack_preds <- stack_mod %>%
predict(new_data = test, type = "class")
format_and_write(stack_preds, "stack_preds2.csv")
