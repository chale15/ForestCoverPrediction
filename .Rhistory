############################################
## Posterior predictive: pi(X*|data)
# We already have draws of (mu, sigma2) from the posterior distribution pi(mu, sigma2|data).  We can use those values to get draws of X*:
x.star <- rnorm(length(mu.XB.use), mu.XB.use, sqrt(sigma2.XB.use))
plot(density(x.star), main="Posterior Predictive Distribution for Servant Leadership Score", xlab="X*")
#95% credible interval for the servant leadership score of a randomly selected person surveyed in these generations
quantile(x.star, c(.025, .975))
library(tidyverse)
library(tidymodels)
library(vroom)
library(parsnip)
library(keras)
library(baguette)
library(bonsai)
library(stacks)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom("./From Kaggle/train.csv") %>%
mutate(Cover_Type=factor(Cover_Type))
test <- vroom("./From Kaggle/test.csv")
untuned_model <- control_stack_grid()
tuned_model <- control_stack_resamples()
folds <- vfold_cv(train, v = 5, repeats = 1)
my_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
my_recipe1 <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
rf_mod <- rand_forest(min_n = 1, mtry = 15, trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe1)
rf_model <- fit_resamples(rf_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = 10,
epochs = 50) %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
nn_model <- fit_resamples(nn_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
boost_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
boost_mod <- boost_tree(trees = 500, learn_rate = .01, tree_depth = 2) %>%
set_engine('xgboost') %>%
set_mode('classification')
boost_wf <- workflow() %>%
add_model(boost_mod) %>%
add_recipe(boost_recipe)
boost_model <- fit_resamples(boost_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
my_stack <- stacks() %>%
add_candidates(rf_model) %>%
add_candidates(nn_model) %>%
add_candidates(boost_model)
rf_preds <- rf_model %>%
predict(new_data = test, type = "class")
# Predictions for the random forest model
rf_preds <- predict(rf_model, new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
# Write random forest predictions to CSV
vroom_write(rf_preds, "rf_preds.csv", delim = ",")
# Predictions for the neural network model
nn_preds <- predict(nn_model, new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
prepped <- prep(my_recipe1)
baked <- bake(prepped, new_data = NULL)
View(baked)
summary(baked)
summary(baked$SoilType)
is.na(baked$SoilType)
sum(is.na(baked$SoilType))
my_recipe1 <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = FALSE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
prepped <- prep(my_recipe1)
baked <- bake(prepped, new_data = NULL)
sum(is.na(baked$SoilType))
rf_mod <- rand_forest(min_n = 1, mtry = 15, trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe1)
rf_model <- fit_resamples(rf_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
library(tidyverse)
library(tidymodels)
library(vroom)
library(parsnip)
library(keras)
library(baguette)
library(bonsai)
library(stacks)
setwd("~/Desktop/Fall 2024/Stat 348/GitHubRepos/ForestCoverPrediction/")
train <- vroom("./From Kaggle/train.csv") %>%
mutate(Cover_Type=factor(Cover_Type))
test <- vroom("./From Kaggle/test.csv")
folds <- vfold_cv(train, v = 5, repeats = 1)
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = 10,
epochs = 50) %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
nn_model <- fit_resamples(nn_wf,
resamples = folds,
metrics = metric_set(roc_auc))#,
# Predictions for the neural network model
nn_preds <- predict(nn_model, new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = tune(),
epochs = 50) %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
tuning_grid <- grid_regular(hidden_units(range=c(5, 15)), levels = 3)
cv_results <- nn_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc))
cv_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- nn_wf %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nn_preds <- predict(final_workflow,
new_data = test,
type = 'class') %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
# Write neural network predictions to CSV
vroom_write(nn_preds, "nn_preds.csv", delim = ",")
boost_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
boost_mod <- boost_tree(trees = 500, learn_rate = .01, tree_depth = tune()) %>%
set_engine('xgboost') %>%
set_mode('classification')
boost_wf <- workflow() %>%
add_model(boost_mod) %>%
add_recipe(boost_recipe)
tuning_grid <- grid_regular(tree_depth(range=c(2,6)), levels = 3)
cv_results <- boost_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- boost_wf %>%
finalize_workflow(best_tune) %>%
fit(data = train)
boost_preds <- predict(final_workflow,
new_data = test,
type = 'class') %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(boost_preds, "boost_preds.csv", delim = ",")
View(best_tune)
boost_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
boost_wf <- workflow() %>%
add_model(boost_mod) %>%
add_recipe(boost_recipe)
tuning_grid <- grid_regular(tree_depth(range=c(2,6)), levels = 3)
cv_results <- boost_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- boost_wf %>%
finalize_workflow(best_tune) %>%
fit(data = train)
View(best_tune)
View(best_tune)
View(best_tune)
boost_preds <- predict(final_workflow,
new_data = test,
type = 'class') %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(boost_preds, "boost_preds2.csv", delim = ",")
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = tune(),
epochs = 50,
activation = 'softmax') %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
tuning_grid <- grid_regular(hidden_units(range=c(5, 15)), levels = 3)
cv_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(accuracy, roc_auc))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- nn_wf %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nn_preds <- predict(final_workflow,
new_data = test,
type = 'class') %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(nn_preds, "nn_preds2.csv", delim = ",")
library(naivebayes)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(nn_recipe)
library(discrim)
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(nn_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 5)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
best_tune <- cv_results %>% select_best(metric='roc_auc')
final_workflow <- nb_workflow %>%
finalize_workflow(best_tune) %>%
fit(data = train)
nb_preds <- predict(final_workflow, new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(nn_preds, "nb_preds.csv", delim = ",")
vroom_write(nb_preds, "nb_preds2.csv", delim = ",")
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 20)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_mutate(SoilType = pmax(
Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
na.rm = TRUE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
#  step_select(Id, Elevation, Aspect, Slope, Horizontal_Distance_To_Hydrology, Vertical_Distance_To_Hydrology, Horizontal_Distance_To_Roadways, Hillshade_9am, Hillshade_Noon, Hillshade_3pm, Horizontal_Distance_To_Fire_Points, WildernessArea, SoilType) %>%
step_mutate_at(c(SoilType, WildernessArea), fn = factor) #%>%
nb_model <- naive_Bayes(Laplace=tune(),
smoothness=tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
nb_workflow <- workflow() %>%
add_model(nb_model) %>%
add_recipe(my_recipe)
tuning_grid <- grid_regular(Laplace(), smoothness(), levels = 10)
folds <- vfold_cv(train, v = 10, repeats=1)
cv_results <- nb_workflow %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
best_tune_nb <- cv_results %>% select_best(metric='accuracy')
final_workflow_nb <- nb_workflow %>%
finalize_workflow(best_tune_nb) %>%
fit(data = train)
nb_preds <- predict(final_workflow,
new_data = test,
type = 'class')
nb_submission <- nb_preds %>%
bind_cols(., test) %>%
select(Id, .pred_class) %>%
rename(Cover_Type = .pred_class)
vroom_write(x=nb_submission, file="./Submissions/NBPreds4.csv", delim=",")
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
library(themis)
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
library(glmnet)
my_recipe <- recipe(Cover_Type~., data = train) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
step_mutate_at(color, fn = factor) %>%
step_mutate(id, feature = id) %>%
step_lencode_glm(all_nominal_predictors(), outcome = vars(type)) %>%
step_smote(all_outcomes(), neighbors=3) %>%
step_range(all_numeric_predictors(), min=0, max=1)
View(best_tune_nb)
View(best_tune_nb)
my_recipe1 <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
#step_mutate(SoilType = pmax(
#  Soil_Type1, Soil_Type2 * 2, Soil_Type3 * 3, Soil_Type4 * 4, Soil_Type5 * 5,
#  Soil_Type6 * 6, Soil_Type7 * 7, Soil_Type8 * 8, Soil_Type9 * 9, Soil_Type10 * 10,
#  Soil_Type11 * 11, Soil_Type12 * 12, Soil_Type13 * 13, Soil_Type14 * 14, Soil_Type15 * 15,
#  Soil_Type16 * 16, Soil_Type17 * 17, Soil_Type18 * 18, Soil_Type19 * 19, Soil_Type20 * 20,
#  Soil_Type21 * 21, Soil_Type22 * 22, Soil_Type23 * 23, Soil_Type24 * 24, Soil_Type25 * 25,
#  Soil_Type26 * 26, Soil_Type27 * 27, Soil_Type28 * 28, Soil_Type29 * 29, Soil_Type30 * 30,
#  Soil_Type31 * 31, Soil_Type32 * 32, Soil_Type33 * 33, Soil_Type34 * 34, Soil_Type35 * 35,
#  Soil_Type36 * 36, Soil_Type37 * 37, Soil_Type38 * 38, Soil_Type39 * 39, Soil_Type40 * 40,
#  na.rm = FALSE)) %>%
step_mutate(WildernessArea = pmax(Wilderness_Area1, Wilderness_Area2 * 2, Wilderness_Area3 * 3, Wilderness_Area4 * 4, na.rm = TRUE)) %>%
#step_rm(contains("Soil_Type")) %>%
step_rm(contains("Wilderness_Area")) %>%
step_rm(Id) %>%
step_mutate(Total_Distance_To_Hydrology = sqrt(Horizontal_Distance_To_Hydrology**2 + Vertical_Distance_To_Hydrology**2)) %>%
step_mutate(Elevation_Vertical_Hydrology = Vertical_Distance_To_Hydrology * Elevation) %>%
step_mutate(Hydrology_Fire = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Fire_Points) %>%
step_mutate(Hydrology_Roadways = Horizontal_Distance_To_Hydrology * Horizontal_Distance_To_Roadways) %>%
step_mutate(Roadways_Fire = Horizontal_Distance_To_Roadways * Horizontal_Distance_To_Fire_Points) %>%
step_mutate_at(WildernessArea, fn = factor) %>%
#step_mutate_at(c(SoilType, WildernessArea), fn = factor) %>%
step_zv(all_predictors())
rf_mod <- rand_forest(min_n = tune(), mtry = tune(), trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe1)
tuning_grid_rf <- grid_regular(min_n(), mtry(c(11,13,15)),levels = 3)
tuning_grid_rf <- grid_regular(min_n(), mtry(c(11,15)),levels = 3)
cv_results_rf <- rf_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid_rf,
metrics = metric_set(accuracy, roc_auc))
best_tune_rf <- cv_results_rf %>% select_best(metric='roc_auc')
View(best_tune_rf)
final_workflow_rf <- rf_wf %>%
finalize_workflow(best_tune_rf) %>%
fit(data = train)
rf_preds <- predict(final_workflow_rf, new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
vroom_write(rf_preds, "rf_preds.csv", delim = ",")
untuned_model <- control_stack_grid()
tuned_model <- control_stack_resamples()
folds <- vfold_cv(train, v = 5, repeats = 1)
my_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
rf_mod <- rand_forest(min_n = 2, mtry = 15, trees = 500) %>%
set_engine('ranger') %>%
set_mode('classification')
rf_wf <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(my_recipe)
rf_model <- fit_resamples(rf_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
nn_recipe <- recipe(Cover_Type~., data = train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_rm(Id) %>%
step_zv(all_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1)
nn_model <- mlp(hidden_units = 15,
epochs = 50) %>%
set_engine("keras") %>%
set_mode("classification")
nn_wf <- workflow() %>%
add_model(nn_model) %>%
add_recipe(nn_recipe)
nn_model <- fit_resamples(nn_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
boost_recipe <- recipe(Cover_Type~., data=train) %>%
step_impute_median(contains("Soil_Type")) %>%
step_zv(all_predictors()) %>%
step_normalize(all_numeric_predictors())
boost_mod <- boost_tree(trees = 500, learn_rate = .01, tree_depth = 6) %>%
set_engine('xgboost') %>%
set_mode('classification')
boost_wf <- workflow() %>%
add_model(boost_mod) %>%
add_recipe(boost_recipe)
boost_model <- fit_resamples(boost_wf,
resamples = folds,
metrics = metric_set(roc_auc),
control = tuned_model)
my_stack <- stacks() %>%
add_candidates(rf_model) %>%
add_candidates(nn_model) %>%
add_candidates(boost_model)
stack_mod <- my_stack %>%
blend_predictions() %>%
fit_members()
stack_preds <- stack_mod %>%
predict(new_data = test, type = "class") %>%
mutate(Cover_Type = .pred_class) %>%
mutate(Id = test$Id) %>%
dplyr::select(Id, Cover_Type)
format_and_write(stack_preds, "stack_preds3.csv")
vroom_write(stack_preds, "stack_preds3.csv")
vroom_write(x=stack_preds, file="./Submissions/stack_preds4.csv", delim=",")
